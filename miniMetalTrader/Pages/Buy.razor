@page "/buy/{id}/{ticker}"
@using System;
@using miniMetalTrader.Shared;
@using System.Linq;
@inject miniMetalTrader.Shared.Services.ClientService ClientService
@inject miniMetalTrader.Shared.Services.RatesService RatesService
@inject miniMetalTrader.Shared.Services.OrderService OrderService
@inject NavigationManager NavManager

<h3>Buy</h3>

@if (order is null)
{
    // show a nice transition if have time...
}
else
{
    <div>@client.Name wants to make an order</div>

    <div>You can buy: @($"{ Instrument.Price * order.Quantity}")</div>

    <div>
        <div>
            @Instrument.Description
        </div>

        @switch (order.Status)
        {
            case PositionStatus.Creating:
                <div>
                    <input type="number" min="1" max="10" @bind="order.Quantity" />
                </div>
                <!--Only make enabled if valid order i.e. quantiy populated and have enough cash on account to cover position-->
                <button class="btn btn-primary" @onclick="@Preview">Preview</button>
                break;
            case PositionStatus.Created:
                <div>OrderId: <em>@order.PositionId</em></div>
                <div>@($"{order.Instrument.Description}{order.Quantity} @ {order.Price} Total Value: {order.Price*order.Quantity}")</div>
                <button class="btn btn-primary" @onclick="@Confirm">Confirm</button>
                break;
            case PositionStatus.Filled:
                <div>Order filled at {order or a transaction datetime} @order.Status </div>
                break;

            default:
                <div>unhandled sequence in Order lifecycle</div>
                break;
        }
    </div>
}


@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Ticker { get; set; }

    private Instrument Instrument { get; set; }
    private Client client { get; set; }
    private Order order { get; set; }

    protected async Task Preview()
    {
        order = await OrderService.CreateOrderAsync(order);
    }

    protected async Task Confirm()
    {
        //NavManager.NavigateTo($"/confirm/{order.PositionId}");

        order = await OrderService.CommitOrderAsync(order);
        client.Account.Balance -= order.Value();
        client.Account.Positions.Add(order);
    }

    protected override async Task OnInitializedAsync()
    {
        this.Instrument = ClientService.GetInstruments().Where(i => i.Ticker == Ticker).FirstOrDefault();
        this.client = ClientService.GetClients().Where(c => c.ClientId == Id).First();
        order = new Order
        {
            Instrument = this.Instrument,
            OrderType = OrderTypes.Buy,
            Price = Instrument.Price,
            Quantity = this.Instrument.MinBuyOrder
        };

        // async POST to create the order... when order is created nav OR post the data as part of page
    }
}
